import {
  Message,
  TextChannel,
  DMChannel,
  ThreadChannel,
  EmbedBuilder
} from 'discord.js';
import { getUserData } from '../../database/userDatabase'; // L·∫•y d·ªØ li·ªáu user (tr·ª´ level)
import { getUserLevel } from '../../levels/levelManager'; // Import h√†m qu·∫£n l√Ω level

export const userinfoPrefixCommand = {
  name: 'userinfo',
  description: 'Xem th√¥ng tin c√° nh√¢n c·ªßa b·∫°n ho·∫∑c ng∆∞·ªùi kh√°c (prefix)',
  async execute(message: Message, args: string) {
      if (!message.guild) return;

      // L·∫•y user ID t·ª´ mention ho·∫∑c ch√≠nh ng∆∞·ªùi g·ªçi l·ªánh
      const rawInput = args[0];
      const match = rawInput ? rawInput.match(/^<@!?(\d+)>$/) : null;
      const userId = match ? match[1] : rawInput || message.author.id;

      // Fetch user
      const user = await message.client.users.fetch(userId).catch(() => null);
      if (!user) {
          return message.reply('‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†y!');
      }

      const member = message.guild.members.cache.get(user.id);
      // L·∫•y d·ªØ li·ªáu user (ch·ªâ l·∫•y money, bank, messages)
      const economyAndMessagesData = await getUserData(message.guild.id, user.id);
      // L·∫•y th√¥ng tin level ri√™ng
      const levelData = await getUserLevel(message.guild.id, user.id);

      // L·∫•y vai tr√≤ v√† x·∫øp theo quy·ªÅn l·ª£i
    // L·∫•y vai tr√≤ v√† x·∫øp theo quy·ªÅn l·ª£i
    const roles = member?.roles.cache
      .filter(role => role.id !== message.guild?.id)
      .sort((a, b) => b.position - a.position)
      .map(role => role.toString()) || [];

      // Embed th√¥ng tin c√° nh√¢n
      const embed = new EmbedBuilder()
          .setColor('#DEA2DD')
          .setTitle('‚úèÔ∏è | Th√¥ng tin ng∆∞·ªùi d√πng')
          .setThumbnail(user.displayAvatarURL({ size: 256 }))
          .setFields(
              {
                  name: 'üÜî | **Th√¥ng tin chung**',
                  value: `> **ID:** ${user.id}\n> **T√™n ng∆∞·ªùi d√πng:** ${user.username}\n> **Tr·∫°ng th√°i:** ${member?.presence?.status || 'Ngo·∫°i tuy·∫øn'}`,
                  inline: false
              },
              {
                  name: '‚è≥ | **Ng√†y t·∫°o & Tham gia**',
                  value: `> **T·∫°o t√†i kho·∫£n:** <t:${Math.floor(user.createdTimestamp / 1000)}:F>\n> **Tham gia server:** <t:${Math.floor(member?.joinedTimestamp! / 1000)}:F>`,
                  inline: false
              },
              {
                  name: `üç• | **Vai tr√≤ (${roles.length})**`,
                  value: roles.length > 0 ? roles.join(', ') : '`Kh√¥ng c√≥ vai tr√≤`',
                  inline: false
              },
              {
                  name: 'üè¶ | **Ti·ªÅn t·ªá & C·∫•p ƒë·ªô**',
                  value: `> **Ti·ªÅn:** ${economyAndMessagesData.money.toLocaleString('vi-VN')} VNƒê\n> **Ng√¢n h√†ng:** ${economyAndMessagesData.bank.toLocaleString('vi-VN')} VNƒê\n> **C·∫•p ƒë·ªô:** ${levelData.level}\n> **Tin nh·∫Øn:** ${economyAndMessagesData.messages}`,
                  inline: false
              }
          )
          .setFooter({ text: 'MineKeo Network' })
          .setTimestamp();

      // G·ª≠i Embed
      if (message.channel.isTextBased()) {
          const ch = message.channel as TextChannel | DMChannel | ThreadChannel;
          await ch.send({ embeds: [embed] });
      }
  },
};