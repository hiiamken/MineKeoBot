import {
    SlashCommandBuilder,
    ChatInputCommandInteraction,
    PermissionFlagsBits,
    EmbedBuilder
  } from 'discord.js';
  import fs from 'fs';
  import path from 'path';
  
  /**
   * L·ªánh /checkbot, ch·ªâ d√†nh cho Admin.
   */
  export const checkBotCommand = {
    data: new SlashCommandBuilder()
      .setName('checkbot')
      .setDescription('üîç Ki·ªÉm tra d·ªØ li·ªáu c·ªßa bot: uptime, dung l∆∞·ª£ng database, ping, RAM')
      .setDefaultMemberPermissions(PermissionFlagsBits.Administrator), // Ch·ªâ Admin
  
    async execute(interaction: ChatInputCommandInteraction) {
      // 1) T√≠nh uptime
      const uptimeSeconds = process.uptime(); // s·ªë gi√¢y bot ƒë√£ ch·∫°y
      const uptimeString = formatUptime(uptimeSeconds);
  
      // 2) L·∫•y dung l∆∞·ª£ng database.sqlite
      let dbSize = 'Kh√¥ng x√°c ƒë·ªãnh';
      try {
        // ƒê·∫£m b·∫£o path.resolve t·ªõi ƒë√∫ng file DB c·ªßa b·∫°n
        const dbPath = path.resolve(process.cwd(), 'database.sqlite');
        const stats = fs.statSync(dbPath);
        dbSize = (stats.size / (1024 * 1024)).toFixed(2) + ' MB';
      } catch (err) {
        console.error('[CHECKBOT] Kh√¥ng l·∫•y ƒë∆∞·ª£c dung l∆∞·ª£ng database:', err);
      }
  
      // 3) Ping c·ªßa bot
      const ping = interaction.client.ws.ping; // ms
  
      // 4) RAM usage (ƒëang d√πng)
      const usedMemoryBytes = process.memoryUsage().rss; // RAM bot ƒëang chi·∫øm
      const usedMemoryMB = (usedMemoryBytes / (1024 * 1024)).toFixed(2) + ' MB';
  
      // T·∫°o embed hi·ªÉn th·ªã
      const embed = new EmbedBuilder()
        .setColor('#DEA2DD')
        .setTitle('ü§ñ Th√¥ng tin Bot')
        .setThumbnail('https://cdn-icons-png.flaticon.com/512/4712/4712027.png') // ƒê·ªïi link icon n·∫øu mu·ªën
        .addFields(
          { name: 'Uptime',    value: uptimeString,     inline: false },
          { name: 'Database',  value: dbSize,           inline: false },
          { name: 'Ping',      value: `${ping} ms`,     inline: false },
          { name: 'RAM',       value: usedMemoryMB,     inline: false }
        )
        .setFooter({ text: 'Th√¥ng tin c·∫≠p nh·∫≠t t·ª´ bot' });
  
      // G·ª≠i tin nh·∫Øn ephemeral (ch·ªâ admin th·∫•y)
      await interaction.reply({ embeds: [embed], ephemeral: true });
    }
  };
  
  /**
   * Chuy·ªÉn s·ªë gi√¢y th√†nh chu·ªói "x gi·ªù y ph√∫t z gi√¢y"
   */
  function formatUptime(totalSeconds: number): string {
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor((totalSeconds % 3600) / 60);
    const seconds = Math.floor(totalSeconds % 60);
    return `${hours} gi·ªù ${minutes} ph√∫t ${seconds} gi√¢y`;
  }
  