import { ChatInputCommandInteraction, SlashCommandBuilder, PermissionFlagsBits, EmbedBuilder, GuildMember } from 'discord.js';
import { hasPermission } from '../../config/config';
import { logInfraction } from '../../database/database';

export const muteCommand = {
  data: new SlashCommandBuilder()
    .setName('mute')
    .setDescription('C·∫•m n√≥i m·ªôt ng∆∞·ªùi d√πng trong kho·∫£ng th·ªùi gian nh·∫•t ƒë·ªãnh.')
    .setDefaultMemberPermissions(PermissionFlagsBits.ModerateMembers)
    .addUserOption(option =>
      option.setName('user')
        .setDescription('Ng∆∞·ªùi d√πng c·∫ßn mute')
        .setRequired(true)
    )
    .addStringOption(option =>
      option.setName('duration')
        .setDescription('Th·ªùi gian mute (v√≠ d·ª•: 1m, 5m, 2h)')
        .setRequired(true)
    )
    .addStringOption(option =>
      option.setName('reason')
        .setDescription('L√Ω do mute')
        .setRequired(false)
    ),

  async execute(interaction: ChatInputCommandInteraction) {
    if (!interaction.member || !(interaction.member instanceof GuildMember)) {
      return interaction.reply({ content: 'üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!', ephemeral: true });
    }

    if (!hasPermission(interaction.member)) {
      return interaction.reply({ content: 'üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!', ephemeral: true });
    }

    const user = interaction.options.getMember('user') as GuildMember;
    const duration = interaction.options.getString('duration')!;
    const reason = interaction.options.getString('reason') || 'Kh√¥ng c√≥ l√Ω do c·ª• th·ªÉ';
    const caseId = `MK-${Date.now().toString(36).toUpperCase()}`; // T·∫°o Case ID h·ª£p l·ªá

    if (!user) {
      return interaction.reply({ content: '‚ö† Kh√¥ng th·ªÉ t√¨m th·∫•y ng∆∞·ªùi d√πng n√†y.', ephemeral: true });
    }

    if (interaction.member.roles.highest.position <= user.roles.highest.position) {
      return interaction.reply({ content: '‚ö† B·∫°n kh√¥ng th·ªÉ mute ng∆∞·ªùi c√≥ quy·ªÅn cao h∆°n ho·∫∑c ngang b·∫±ng b·∫°n!', ephemeral: true });
    }

    const timeMs = parseDuration(duration);
    if (!timeMs) {
      return interaction.reply({ content: '‚ö† Th·ªùi gian kh√¥ng h·ª£p l·ªá! V√≠ d·ª•: `1m`, `5m`, `2h`', ephemeral: true });
    }

    try {
      await user.timeout(timeMs, reason);

      // L∆∞u log v√†o database
      await logInfraction(interaction.guild!.id, user.id, interaction.user.id, 'mute', reason, duration);

      const embed = new EmbedBuilder()
        .setColor("#DEA2DD")
        .setTitle("`‚è≥` X·ª≠ l√Ω vi ph·∫°m - Mute")
        .setDescription(
          `
  \`üìå\` **Th√¥ng tin vi ph·∫°m**
  > **Ng∆∞·ªùi d√πng:** <@${user.id}>
  > **Ng∆∞·ªùi x·ª≠ l√Ω:** <@${interaction.user.id}>
  > **ID:** \`${caseId}\`

  \`‚è∞\` **Th·ªùi gian v√† l√Ω do**
  > **L√Ω do:** ${reason}
  > **Th·ªùi gian:** ${duration}
  > **H·∫øt h·∫°n:** <t:${Math.floor((Date.now() + timeMs) / 1000)}:F>
  `
        )
        .setThumbnail(user.displayAvatarURL())
        .setFooter({
          text: `X·ª≠ l√Ω b·ªüi: ${interaction.user.tag}`,
          iconURL: interaction.user.displayAvatarURL(),
        })
        .setTimestamp();

      await interaction.reply({ embeds: [embed] });
    } catch (error) {
      console.error('L·ªói khi mute:', error);
      return interaction.reply({ content: '‚ö† ƒê√£ x·∫£y ra l·ªói khi mute ng∆∞·ªùi d√πng.', ephemeral: true });
    }
  }
};

// H√†m chuy·ªÉn ƒë·ªïi th·ªùi gian
function parseDuration(duration: string): number | null {
  const match = duration.match(/^(\d+)(s|m|h|d)$/);
  if (!match) return null;

  const value = parseInt(match[1]);
  const unit = match[2];

  const unitMultipliers: { [key: string]: number } = { s: 1000, m: 60000, h: 3600000, d: 86400000 };
  return value * (unitMultipliers[unit] || 0);
}
