"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.muteCommand = void 0;
const discord_js_1 = require("discord.js");
const config_1 = require("../../config/config");
const database_1 = require("../../database/database");
exports.muteCommand = {
    name: "mute",
    description: "C·∫•m n√≥i m·ªôt ng∆∞·ªùi d√πng trong kho·∫£ng th·ªùi gian nh·∫•t ƒë·ªãnh.",
    async execute(message, args) {
        if (!message.member || !(0, config_1.hasPermission)(message.member)) {
            return message.reply({
                content: "üö´ B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!",
            });
        }
        if (!message.guild)
            return;
        const userId = args[0]?.replace(/[<@!>]/g, "");
        const duration = args[1] || "5m"; // M·∫∑c ƒë·ªãnh 5 ph√∫t n·∫øu kh√¥ng nh·∫≠p
        const reason = args.slice(2).join(" ") || "Kh√¥ng c√≥ l√Ω do c·ª• th·ªÉ";
        const caseId = `MK-${Date.now().toString(36).toUpperCase()}`; // T·∫°o Case ID h·ª£p l·ªá
        if (!userId) {
            return message.reply({
                content: "‚ö† Vui l√≤ng cung c·∫•p ID ho·∫∑c mention ng∆∞·ªùi c·∫ßn mute.",
            });
        }
        const user = await message.guild.members.fetch(userId).catch(() => null);
        if (!user) {
            return message.reply({
                content: "‚ö† Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i trong server.",
            });
        }
        // üî• Ki·ªÉm tra n·∫øu bot c√≥ quy·ªÅn "Timeout Members"
        if (!message.guild.members.me?.permissions.has(discord_js_1.PermissionsBitField.Flags.ModerateMembers)) {
            return message.reply({
                content: "‚ö† Bot kh√¥ng c√≥ quy·ªÅn c·∫•m n√≥i ng∆∞·ªùi d√πng! H√£y ki·ªÉm tra quy·ªÅn c·ªßa bot.",
            });
        }
        // üî• Ki·ªÉm tra n·∫øu bot c√≥ role cao h∆°n ng∆∞·ªùi b·ªã mute
        if (message.guild.members.me.roles.highest.position <=
            user.roles.highest.position) {
            return message.reply({
                content: "‚ö† Bot kh√¥ng th·ªÉ mute ng∆∞·ªùi c√≥ quy·ªÅn cao h∆°n ho·∫∑c ngang b·∫±ng n√≥!",
            });
        }
        // üî• Ki·ªÉm tra n·∫øu ng∆∞·ªùi mute c√≥ quy·ªÅn cao h∆°n ng∆∞·ªùi g·ª≠i l·ªánh
        if (message.member.roles.highest.position <= user.roles.highest.position) {
            return message.reply({
                content: "‚ö† B·∫°n kh√¥ng th·ªÉ mute ng∆∞·ªùi c√≥ quy·ªÅn cao h∆°n ho·∫∑c ngang b·∫±ng b·∫°n!",
            });
        }
        const timeMs = parseDuration(duration);
        if (!timeMs) {
            return message.reply({
                content: "‚ö† Th·ªùi gian kh√¥ng h·ª£p l·ªá! V√≠ d·ª•: `1m`, `5m`, `2h`",
            });
        }
        try {
            await user.timeout(timeMs, reason);
            // üî• L∆∞u log v√†o database
            await (0, database_1.logInfraction)(message.guild.id, user.id, message.author.id, "mute", reason, duration);
            // üìú Embed chuy√™n nghi·ªáp
            const embed = new discord_js_1.EmbedBuilder()
                .setColor("#DEA2DD")
                .setTitle("\`‚è≥\` X·ª≠ l√Ω vi ph·∫°m - Mute")
                .setDescription(`
  \`üìå\` **Action Information**
  > **Ng∆∞·ªùi d√πng:** <@${user.id}>
  > **Ng∆∞·ªùi x·ª≠ l√Ω:** <@${message.author.id}>
  > **ID:** \`${caseId}\`

  \`‚è∞\` **Timeout Information**
  > **L√Ω do:** ${reason}
  > **Th·ªùi gian:** ${duration}
  > **H·∫øt h·∫°n:** <t:${Math.floor((Date.now() + timeMs) / 1000)}:F>
  `)
                .setThumbnail(user.displayAvatarURL())
                .setFooter({
                text: `X·ª≠ l√Ω b·ªüi: ${message.author.tag}`,
                iconURL: message.author.displayAvatarURL(),
            })
                .setTimestamp();
            await message.channel.send({ embeds: [embed] });
        }
        catch (error) {
            console.error("L·ªói khi mute:", error);
            return message.reply({
                content: "‚ö† ƒê√£ x·∫£y ra l·ªói khi mute ng∆∞·ªùi d√πng. Vui l√≤ng ki·ªÉm tra l·∫°i quy·ªÅn c·ªßa bot!",
            });
        }
    },
};
// üîÑ H√†m chuy·ªÉn ƒë·ªïi th·ªùi gian t·ª´ `1m`, `5m`, `2h`
function parseDuration(duration) {
    const match = duration.match(/^(\d+)(s|m|h|d)$/);
    if (!match)
        return null;
    const value = parseInt(match[1]);
    const unit = duration.slice(-1);
    const unitMultipliers = {
        s: 1000,
        m: 60000,
        h: 3600000,
        d: 86400000,
    };
    return value * (unitMultipliers[unit] || 0);
}
