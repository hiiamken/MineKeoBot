"use strict";
// src/admincommands/slash/reactionRoleCommand.ts
Object.defineProperty(exports, "__esModule", { value: true });
exports.reactionRoleCommand = void 0;
const discord_js_1 = require("discord.js");
const reactionRoleLoader_1 = require("../../handlers/reactionRoleLoader");
const parseRolesData_1 = require("../../utils/parseRolesData");
exports.reactionRoleCommand = {
    data: new discord_js_1.SlashCommandBuilder()
        .setName('reactionrole')
        .setDescription('T·∫°o embed ƒëƒÉng k√Ω nh·∫≠n role qua reaction (kh√¥ng d√πng modal).')
        .setDefaultMemberPermissions(discord_js_1.PermissionFlagsBits.Administrator),
    async execute(interaction) {
        // 1) Ki·ªÉm tra guild
        if (!interaction.guild) {
            return interaction.reply({ content: 'L·ªánh n√†y ch·ªâ d√πng trong server!', ephemeral: true });
        }
        // 2) L·∫•y channel hi·ªán t·∫°i, √©p ki·ªÉu TextChannel ƒë·ªÉ s·ª≠ d·ª•ng c√°c ph∆∞∆°ng th·ª©c send v√† createMessageCollector
        const mainChannel = interaction.channel;
        if (!mainChannel || !mainChannel.isTextBased()) {
            return interaction.reply({
                content: 'Channel hi·ªán t·∫°i kh√¥ng ph·∫£i k√™nh text!',
                ephemeral: true
            });
        }
        const textChannel = mainChannel;
        // 3) G·ª≠i tin ephemeral h∆∞·ªõng d·∫´n b·∫Øt ƒë·∫ßu thi·∫øt l·∫≠p Reaction Role
        await interaction.reply({
            content: 'B·∫Øt ƒë·∫ßu thi·∫øt l·∫≠p Reaction Role (5 b∆∞·ªõc):\n' +
                '0) Nh·∫≠p **ID k√™nh** ho·∫∑c **mention k√™nh** ƒë·ªÉ g·ª≠i embed (VD: 1234567890123 ho·∫∑c #general)\n' +
                '1) Nh·∫≠p **ti√™u ƒë·ªÅ** cho embed\n' +
                '2) Nh·∫≠p **opening_text** (ho·∫∑c "none" ƒë·ªÉ b·ªè)\n' +
                '3) Nh·∫≠p **Danh s√°ch role** (m·ªói d√≤ng: `roleId|icon|m√¥ t·∫£`, c√≥ th·ªÉ nh·∫≠p tag role nh∆∞ `<@&roleId>`)\n' +
                '4) Nh·∫≠p **closing_text** (ho·∫∑c "none" ƒë·ªÉ b·ªè)\n\n' +
                'M·ªói b∆∞·ªõc c√≥ **5 ph√∫t** ƒë·ªÉ tr·∫£ l·ªùi.',
            ephemeral: true
        });
        const userId = interaction.user.id;
        // 4) T·∫°o collector ƒë·ªÉ l·∫Øng nghe tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng trong channel hi·ªán t·∫°i (t·ªïng th·ªùi gian 25 ph√∫t)
        const collector = textChannel.createMessageCollector({
            filter: (m) => m.author.id === userId,
            time: 25 * 60_000
        });
        let step = 0;
        let embedChannelId = '';
        let embedTitle = '';
        let openingText = '';
        let rolesData = '';
        let closingText = '';
        // B∆∞·ªõc 0: H·ªèi k√™nh ƒë·ªÉ g·ª≠i embed
        await textChannel.send(`<@${userId}> **B∆∞·ªõc 0**: Nh·∫≠p **ID k√™nh** ho·∫∑c **mention k√™nh** (VD: 1234567890123 ho·∫∑c #general).`);
        collector.on('collect', async (msg) => {
            if (msg.author.id !== userId)
                return;
            const content = msg.content.trim();
            if (step === 0) {
                // L·∫•y k√™nh: n·∫øu user nh·∫≠p mention d·∫°ng <#1234567890123>, lo·∫°i b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát
                embedChannelId = content.replace(/[<#>]/g, '');
                step++;
                await textChannel.send(`<@${userId}> **B∆∞·ªõc 1**: Nh·∫≠p **ti√™u ƒë·ªÅ** cho embed.`);
                return;
            }
            if (step === 1) {
                // L·∫•y ti√™u ƒë·ªÅ embed
                embedTitle = content;
                step++;
                await textChannel.send(`<@${userId}> **B∆∞·ªõc 2**: Nh·∫≠p **opening_text** (ho·∫∑c g√µ "none" ƒë·ªÉ b·ªè).`);
                return;
            }
            if (step === 2) {
                // L·∫•y opening_text
                openingText = (content.toLowerCase() === 'none') ? '' : content;
                step++;
                await textChannel.send(`<@${userId}> **B∆∞·ªõc 3**: Nh·∫≠p danh s√°ch role (m·ªói d√≤ng "roleId|icon|m√¥ t·∫£").\nV√≠ d·ª•:\n112233|üçå|Role Banana\n<@&445566>|<:Kitkat:1234>|Role Kitkat`);
                return;
            }
            if (step === 3) {
                // L·∫•y danh s√°ch role
                rolesData = (content.toLowerCase() === 'none') ? '' : content;
                step++;
                await textChannel.send(`<@${userId}> **B∆∞·ªõc 4**: Nh·∫≠p **closing_text** (ho·∫∑c g√µ "none" ƒë·ªÉ b·ªè).`);
                return;
            }
            if (step === 4) {
                // L·∫•y closing_text
                closingText = (content.toLowerCase() === 'none') ? '' : content;
                step++;
                collector.stop('done');
            }
        });
        collector.on('end', async (collected, reason) => {
            if (reason !== 'done') {
                return textChannel.send(`<@${userId}> H·∫øt th·ªùi gian ho·∫∑c ch∆∞a tr·∫£ l·ªùi ƒë·ªß c√°c b∆∞·ªõc!`);
            }
            // 5) T√¨m k√™nh ƒë·ªÉ g·ª≠i embed d·ª±a tr√™n embedChannelId
            const guild = interaction.guild;
            const embedChannel = guild.channels.cache.get(embedChannelId);
            // B∆∞·ªõc 1: Ki·ªÉm tra embedChannel c√≥ t·ªìn t·∫°i
            if (!embedChannel) {
                return textChannel.send(`<@${userId}> K√™nh \`${embedChannelId}\` kh√¥ng t·ªìn t·∫°i!`);
            }
            // B∆∞·ªõc 2: Ki·ªÉm tra type k√™nh
            if (embedChannel.type !== discord_js_1.ChannelType.GuildText &&
                embedChannel.type !== discord_js_1.ChannelType.GuildAnnouncement) {
                return textChannel.send(`<@${userId}> K√™nh \`${embedChannelId}\` kh√¥ng ph·∫£i k√™nh text ho·∫∑c k√™nh th√¥ng b√°o!`);
            }
            // B∆∞·ªõc 3: √âp ki·ªÉu sang TextChannel (n·∫øu b·∫°n ch·ªâ mu·ªën TextChannel), 
            // ho·∫∑c ch·∫•p nh·∫≠n GUILD_ANNOUNCEMENT => √©p ki·ªÉu sang TextChannel
            const targetChannel = embedChannel;
            // 6) Parse danh s√°ch role (s·ª≠ d·ª•ng h√†m parseRolesData t·ª´ utils)
            const rolesInfo = (0, parseRolesData_1.parseRolesData)(rolesData);
            // 7) T·∫°o n·ªôi dung cho ph·∫ßn role
            let roleContent = '';
            for (const r of rolesInfo) {
                // Format: ¬´icon¬ª <@&roleId> m√¥ t·∫£
                roleContent += `¬´${r.icon}¬ª <@&${r.roleId}> ${r.desc}\n\n`;
            }
            const fullDesc = `${openingText}\n\n${roleContent}\n${closingText}`.trim();
            // 8) T·∫°o embed v·ªõi m√†u h·ªìng nh·∫π #DEA2DD
            const embed = new discord_js_1.EmbedBuilder()
                .setTitle(embedTitle || 'ƒêƒÉng k√Ω nh·∫≠n role')
                .setDescription(fullDesc)
                .setColor('#DEA2DD')
                .setFooter({
                text: 'MINEKEO NETWORK',
                iconURL: guild.iconURL() ?? undefined
            })
                .setTimestamp();
            // 9) G·ª≠i embed v√†o k√™nh target
            const msg = await targetChannel.send({ embeds: [embed] });
            // 10) L∆∞u config v√†o database th√¥ng qua c√°c h√†m l∆∞u c·ªßa reactionRoleLoader
            await (0, reactionRoleLoader_1.saveReactionRoleMessage)(msg.id, guild.id, targetChannel.id, 'normal', // B·∫°n c√≥ th·ªÉ b·ªï sung th√™m t√πy ch·ªçn lo·∫°i n·∫øu mu·ªën
            openingText, closingText);
            // 11) Th√™m reaction cho m·ªói role v√† l∆∞u mapping
            for (const r of rolesInfo) {
                await (0, reactionRoleLoader_1.saveReactionRoleMapping)(msg.id, r.icon, r.roleId);
                try {
                    await msg.react(r.icon);
                }
                catch (err) {
                    console.error(`L·ªói react icon ${r.icon}:`, err);
                }
            }
            // 12) Th√¥ng b√°o ho√†n t·∫•t trong k√™nh l·ªánh
            await textChannel.send(`<@${userId}> **ƒê√£ t·∫°o Reaction Role th√†nh c√¥ng** t·∫°i k√™nh <#${embedChannelId}>!`);
        });
    },
};
