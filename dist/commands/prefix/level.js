"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.levelPrefixCommand = void 0;
const discord_js_1 = require("discord.js");
const levelManager_1 = require("../../levels/levelManager");
/**
 * T·∫°o thanh ti·∫øn tr√¨nh text-based.
 * @param currentXP XP hi·ªán t·∫°i
 * @param requiredXP XP c·∫ßn ƒë·ªÉ l√™n level
 * @param barLength ƒê·ªô d√†i thanh (m·∫∑c ƒë·ªãnh 20)
 */
function createProgressBar(currentXP, requiredXP, barLength = 20) {
    const progress = Math.floor((currentXP / requiredXP) * barLength);
    const bar = '‚ñà'.repeat(progress) + '‚ñë'.repeat(barLength - progress);
    return `\`${bar}\``;
}
exports.levelPrefixCommand = {
    name: 'level',
    description: 'Xem c·∫•p ƒë·ªô c·ªßa b·∫°n ho·∫∑c ng∆∞·ªùi kh√°c (prefix) - kh√¥ng hi·ªÉn th·ªã t√™n/ID',
    async execute(message, args) {
        if (!message.guild)
            return;
        // N·∫øu kh√¥ng c√≥ ƒë·ªëi s·ªë => ch√≠nh l√† ng∆∞·ªùi g·ª≠i
        let userId = message.author.id;
        if (args.length > 0) {
            // N·∫øu c√≥ ƒë·ªëi s·ªë => ki·ªÉm tra mention ho·∫∑c ID
            const rawInput = args[0];
            const match = rawInput.match(/^<@!?(\d+)>$/);
            userId = match ? match[1] : rawInput;
        }
        // L·∫•y c·∫•p ƒë·ªô v√† XP
        const { xp, level } = await (0, levelManager_1.getUserLevel)(message.guild.id, userId);
        const required = (0, levelManager_1.getRequiredXp)(level);
        // T·∫°o thanh ti·∫øn tr√¨nh + t√≠nh % XP
        const progressBar = createProgressBar(xp, required);
        const percent = ((xp / required) * 100).toFixed(1);
        // L·∫•y avatar user (n·∫øu c·∫ßn hi·ªÉn th·ªã ·∫£nh)
        const user = await message.client.users.fetch(userId);
        // T·∫°o Embed
        const embed = new discord_js_1.EmbedBuilder()
            .setColor('#DEA2DD')
            // Ti√™u ƒë·ªÅ v·ªõi icon trong backticks
            .setTitle('`üèÜ` | Th√¥ng Tin C·∫•p ƒê·ªô')
            .setThumbnail(user.displayAvatarURL({ forceStatic: false, size: 128 }))
            .addFields({
            name: 'C·∫•p ƒê·ªô',
            // M·ªói d√≤ng b·∫Øt ƒë·∫ßu b·∫±ng ">"
            value: `> **C·∫•p**: ${level}\n` +
                `> **XP**: ${xp} / ${required} (${percent}%)\n` +
                `> **Ti·∫øn Tr√¨nh**: ${progressBar}`
        })
            .setTimestamp();
        // G·ª≠i Embed
        if (message.channel.isTextBased()) {
            const channel = message.channel;
            await channel.send({ embeds: [embed] });
        }
    },
};
